digraph ~_Alloc_construct_ptr<class_std::allocator<struct_std::_List_node<struct_std::pair<class_std::basic_string<char,struct_std::char_traits<char>,class_std::allocator<char>_>_const_,class_std::unordered_map<class_std::basic_string<char,struct_std::char_traits<char>,class_std::allocator<char>_>,struct_atomic_counter_entry,struct_std::hash<class_std::basic_string<char,struct_std::char_traits<char>,class_std::allocator<char>_>_>,struct_std::equal_to<class_std::basic_string<char,struct_std::char_traits<char>,class_std::allocator<char>_>_>,class_std::allocator<struct_std::pair<class_std::basic_string<char,struct_std::char_traits<char>,class_std::allocator<char>_>_const_,struct_atomic_counter_entry>_>_>_>,void*___ptr64>_>_> {
  node [shape="box"];
  graph [splines=ortho];
  BB75a6ef700 -> BB75a6ef717 [color="green"];
  BB75a6ef700 -> BB75a6ef70d [color="red"];
  BB75a6ef70d -> BB75a6ef717 [color="red"];
}