digraph format<class_std::back_insert_iterator<class_std::basic_string<wchar_t,struct_std::char_traits<wchar_t>,class_std::allocator<wchar_t>_>_>,class_std::basic_string<wchar_t,struct_std::char_traits<wchar_t>,class_std::allocator<wchar_t>_>,class_boost::basic_regex<wchar_t,struct_boost::regex_traits<wchar_t,class_boost::w32_regex_traits<wchar_t>_>_>_> {
  node [shape="box"];
  graph [splines=ortho];
  BB75acc8a74 -> BB75acc8ab0 [color="green"];
  BB75acc8a74 -> BB75acc8aaa [color="red"];
  BB75acc8ab0 -> BB75acc8ad7 [color="green"];
  BB75acc8ab0 -> BB75acc8ad4 [color="red"];
  BB75acc8ad4 -> BB75acc8ad7 [color="blue"];
}