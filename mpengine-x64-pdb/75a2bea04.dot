digraph visit_if<boost::property_tree::basic_ptree<std::basic_string<char,std::char_traits<char>,std::allocator<char>_>,std::basic_string<char,std::char_traits<char>,std::allocator<char>_>,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char>_>_>_>_const_,<lambda_3848707e45ef1cae27181e68b78c0a82>,<lambda_253d0d4ea5e7a4e05cdd39ec2285604b>,std::basic_string<char,std::char_traits<char>,std::allocator<char>_>_> {
  node [shape="box"];
  graph [splines=ortho];
  BB75a2bea04 -> BB75a2bea72 [color="green"];
  BB75a2bea04 -> BB75a2bea44 [color="red"];
  BB75a2bea44 -> BB75a2bea55 [color="red"];
  BB75a2bea72 -> BB75a2bea7a [color="blue"];
  BB75a2bea7a -> BB75a2bea55 [color="green"];
  BB75a2bea7a -> BB75a2bea8c [color="red"];
  BB75a2bea8c -> BB75a2beaaa [color="green"];
  BB75a2bea8c -> BB75a2bea93 [color="red"];
  BB75a2bea93 -> BB75a2beafa [color="blue"];
  BB75a2beaaa -> BB75a2beafa [color="red"];
  BB75a2beafa -> BB75a2bea55 [color="green"];
  BB75a2beafa -> BB75a2beb03 [color="red"];
  BB75a2beb03 -> BB75a2bea7a [color="blue"];
}