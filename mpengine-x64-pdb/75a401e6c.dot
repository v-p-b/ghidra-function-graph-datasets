digraph copy_if<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<rolling_queue_entry>_>_>,std::back_insert_iterator<std::vector<rolling_queue_entry,std::allocator<rolling_queue_entry>_>_>,<lambda_b16807b390f2f9242456b11a6e03dc97>_> {
  node [shape="box"];
  graph [splines=ortho];
  BB75a401e6c -> BB75a401f43 [color="green"];
  BB75a401e6c -> BB75a401e9f [color="red"];
  BB75a401e9f -> BB75a401ea2 [color="blue"];
  BB75a401ea2 -> BB75a401eab [color="blue"];
  BB75a401eab -> BB75a401ef2 [color="green"];
  BB75a401eab -> BB75a401eb0 [color="red"];
  BB75a401eb0 -> BB75a401ecf [color="green"];
  BB75a401eb0 -> BB75a401ecc [color="red"];
  BB75a401ecc -> BB75a401ecf [color="blue"];
  BB75a401ecf -> BB75a401edc [color="green"];
  BB75a401ecf -> BB75a401ed9 [color="red"];
  BB75a401ed9 -> BB75a401edc [color="blue"];
  BB75a401edc -> BB75a401f17 [color="green"];
  BB75a401edc -> BB75a401eed [color="red"];
  BB75a401eed -> BB75a401eab [color="blue"];
  BB75a401f17 -> BB75a401f31 [color="green"];
  BB75a401f17 -> BB75a401f21 [color="red"];
  BB75a401f21 -> BB75a401eed [color="blue"];
  BB75a401f31 -> BB75a401eed [color="blue"];
  BB75a401f43 -> BB75a401ea2 [color="blue"];
}