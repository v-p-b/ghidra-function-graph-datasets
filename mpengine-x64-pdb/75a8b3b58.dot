digraph _Sort_heap_unchecked<struct_boost::multi_index::detail::copy_map_entry<struct_boost::multi_index::detail::sequenced_index_node<struct_boost::multi_index::detail::ordered_index_node<struct_boost::multi_index::detail::null_augment_policy,struct_boost::multi_index::detail::index_node_base<struct_std::pair<class_std::basic_string<char,struct_std::char_traits<char>,class_std::allocator<char>_>_const_,class_boost::property_tree::basic_ptree<class_std::basic_string<char,struct_std::char_traits<char>,class_std::allocator<char>_>,class_std::basic_string<char,struct_std::char_traits<char>,class_std::allocator<char>_>,struct_std::less<class_std::basic_string<char,struct_std::char_traits<char>,class_std::allocator<char>_>_>_>_>,class_std::allocator<struct_std::pair<class_std::basic_string<char,struct_std::char_traits<char>,class_std::allocator<char>_>_const_,class_boost::property_tree::basic_ptree<class_std::basic_string<char,struct_std::char_traits<char>,class_std::allocator<char>_>,class_std::basic_string<char,struct_std::char_traits<char>,class_std::allocator<char>_>,struct_std::less<class_std::basic_string<char,struct_std::char_traits<char>,class_std::allocator<char>_>_>_>_>_>_>_>_>_>*___ptr64,struct_std::less<void>_> {
  node [shape="box"];
  graph [splines=ortho];
  BB75a8b3b58 -> BB75a8b3bb9 [color="green"];
  BB75a8b3b58 -> BB75a8b3b7a [color="red"];
  BB75a8b3b7a -> BB75a8b3b7e [color="blue"];
  BB75a8b3b7e -> BB75a8b3b7e [color="green"];
  BB75a8b3b7e -> BB75a8b3bb9 [color="red"];
}