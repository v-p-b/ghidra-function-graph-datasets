digraph copy_if<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>_>_const_,rolling_queue>_>_>_>,std::insert_iterator<std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char>_>,rolling_queue,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char>_>_>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>_>_const_,rolling_queue>_>_>_>,<lambda_d84075e060ba8f2afe12f5b322454d6b>_> {
  node [shape="box"];
  graph [splines=ortho];
  BB75abab97c -> BB75abab9b6 [color="blue"];
  BB75abab9b6 -> BB75ababa27 [color="green"];
  BB75abab9b6 -> BB75abab9bb [color="red"];
  BB75abab9bb -> BB75ababa22 [color="green"];
  BB75abab9bb -> BB75ababa00 [color="red"];
  BB75ababa00 -> BB75ababa22 [color="red"];
  BB75ababa22 -> BB75abab9b6 [color="blue"];
}