digraph visit_if<boost::property_tree::basic_ptree<std::basic_string<char,std::char_traits<char>,std::allocator<char>_>,std::basic_string<char,std::char_traits<char>,std::allocator<char>_>,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char>_>_>_>_const_,<lambda_731a6e8f96fcdb821b9e71e4e51d95bd>,<lambda_790f6085bc7d9991f6abc1fae80956de>,std::basic_string<char,std::char_traits<char>,std::allocator<char>_>_> {
  node [shape="box"];
  graph [splines=ortho];
  BB75a2be59c -> BB75a2be60a [color="green"];
  BB75a2be59c -> BB75a2be5dc [color="red"];
  BB75a2be5dc -> BB75a2be5ed [color="red"];
  BB75a2be60a -> BB75a2be612 [color="blue"];
  BB75a2be612 -> BB75a2be5ed [color="green"];
  BB75a2be612 -> BB75a2be624 [color="red"];
  BB75a2be624 -> BB75a2be642 [color="green"];
  BB75a2be624 -> BB75a2be62b [color="red"];
  BB75a2be62b -> BB75a2be692 [color="blue"];
  BB75a2be642 -> BB75a2be692 [color="red"];
  BB75a2be692 -> BB75a2be5ed [color="green"];
  BB75a2be692 -> BB75a2be69b [color="red"];
  BB75a2be69b -> BB75a2be612 [color="blue"];
}