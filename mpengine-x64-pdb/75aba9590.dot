digraph copy_if<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>_>_const_,atomic_counter_entry>_>_>_>,std::insert_iterator<std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char>_>,atomic_counter_entry,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char>_>_>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>_>_const_,atomic_counter_entry>_>_>_>,<lambda_18802898443f73a2ec7d207404e7a10a>_> {
  node [shape="box"];
  graph [splines=ortho];
  BB75aba9590 -> BB75aba95c8 [color="blue"];
  BB75aba95c8 -> BB75aba9646 [color="green"];
  BB75aba95c8 -> BB75aba95cd [color="red"];
  BB75aba95cd -> BB75aba9641 [color="green"];
  BB75aba95cd -> BB75aba9623 [color="red"];
  BB75aba9623 -> BB75aba9641 [color="red"];
  BB75aba9641 -> BB75aba95c8 [color="blue"];
}