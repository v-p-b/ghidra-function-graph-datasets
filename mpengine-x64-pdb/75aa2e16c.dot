digraph binary_search<class_std::_Vector_const_iterator<class_std::_Vector_val<struct_std::_Simple_types<unsigned_long>_>_>,struct_FilteredTrie<unsigned_long,class_FilteredTrieSerializer<unsigned_long>_>::BySecondWordPred,struct_FilteredTrie<unsigned_long,class_FilteredTrieSerializer<unsigned_long>_>::BySecondWordPred> {
  node [shape="box"];
  graph [splines=ortho];
  BB75aa2e16c -> BB75aa2e1ce [color="green"];
  BB75aa2e16c -> BB75aa2e19b [color="red"];
  BB75aa2e19b -> BB75aa2e1a2 [color="blue"];
  BB75aa2e1a2 -> BB75aa2e1c6 [color="green"];
  BB75aa2e1a2 -> BB75aa2e1b6 [color="red"];
  BB75aa2e1b6 -> BB75aa2e1c9 [color="blue"];
  BB75aa2e1c6 -> BB75aa2e1c9 [color="blue"];
  BB75aa2e1c9 -> BB75aa2e1a2 [color="green"];
  BB75aa2e1c9 -> BB75aa2e1ce [color="red"];
  BB75aa2e1ce -> BB75aa2e1e6 [color="green"];
  BB75aa2e1ce -> BB75aa2e1d3 [color="red"];
  BB75aa2e1d3 -> BB75aa2e1e6 [color="green"];
  BB75aa2e1d3 -> BB75aa2e1e3 [color="red"];
  BB75aa2e1e3 -> BB75aa2e1e6 [color="blue"];
}