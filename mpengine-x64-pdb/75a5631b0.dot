digraph _Append_uncounted_range<class_boost::iterators::transform_iterator<struct_boost::algorithm::detail::copy_iterator_rangeF<class_std::basic_string<char,struct_std::char_traits<char>,class_std::allocator<char>_>,class_std::_String_const_iterator<class_std::_String_val<struct_std::_Simple_types<char>_>_>_>,class_boost::algorithm::split_iterator<class_std::_String_const_iterator<class_std::_String_val<struct_std::_Simple_types<char>_>_>_>,struct_boost::use_default,struct_boost::use_default>,class_boost::iterators::transform_iterator<struct_boost::algorithm::detail::copy_iterator_rangeF<class_std::basic_string<char,struct_std::char_traits<char>,class_std::allocator<char>_>,class_std::_String_const_iterator<class_std::_String_val<struct_std::_Simple_types<char>_>_>_>,class_boost::algorithm::split_iterator<class_std::_String_const_iterator<class_std::_String_val<struct_std::_Simple_types<char>_>_>_>,struct_boost::use_default,struct_boost::use_default>_> {
  node [shape="box"];
  graph [splines=ortho];
  BB75a5631b0 -> BB75a5631de [color="blue"];
  BB75a5631de -> BB75a56321a [color="green"];
  BB75a5631de -> BB75a5631ed [color="red"];
  BB75a56321a -> BB75a56326c [color="green"];
  BB75a56321a -> BB75a563238 [color="red"];
  BB75a563238 -> BB75a563249 [color="blue"];
  BB75a563249 -> BB75a5631de [color="blue"];
  BB75a56326c -> BB75a563249 [color="blue"];
}