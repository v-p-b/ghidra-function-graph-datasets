digraph _Append_uncounted_range<class_boost::iterators::transform_iterator<struct_boost::algorithm::detail::copy_iterator_rangeF<class_std::basic_string<char,struct_std::char_traits<char>,class_std::allocator<char>_>,class_std::_String_iterator<class_std::_String_val<struct_std::_Simple_types<char>_>_>_>,class_boost::algorithm::split_iterator<class_std::_String_iterator<class_std::_String_val<struct_std::_Simple_types<char>_>_>_>,struct_boost::use_default,struct_boost::use_default>,class_boost::iterators::transform_iterator<struct_boost::algorithm::detail::copy_iterator_rangeF<class_std::basic_string<char,struct_std::char_traits<char>,class_std::allocator<char>_>,class_std::_String_iterator<class_std::_String_val<struct_std::_Simple_types<char>_>_>_>,class_boost::algorithm::split_iterator<class_std::_String_iterator<class_std::_String_val<struct_std::_Simple_types<char>_>_>_>,struct_boost::use_default,struct_boost::use_default>_> {
  node [shape="box"];
  graph [splines=ortho];
  BB75a8c679c -> BB75a8c67c6 [color="blue"];
  BB75a8c67c6 -> BB75a8c680a [color="green"];
  BB75a8c67c6 -> BB75a8c67d5 [color="red"];
  BB75a8c67d5 -> BB75a8c67c6 [color="blue"];
}