digraph multi_index_container<struct_std::pair<class_std::basic_string<char,struct_std::char_traits<char>,class_std::allocator<char>_>_const_,class_boost::property_tree::basic_ptree<class_std::basic_string<char,struct_std::char_traits<char>,class_std::allocator<char>_>,class_std::basic_string<char,struct_std::char_traits<char>,class_std::allocator<char>_>,struct_std::less<class_std::basic_string<char,struct_std::char_traits<char>,class_std::allocator<char>_>_>_>_>,struct_boost::multi_index::indexed_by<struct_boost::multi_index::sequenced<struct_boost::multi_index::tag<struct_boost::mpl::na,struct_boost::mpl::na,struct_boost::mpl::na,struct_boost::mpl::na,struct_boost::mpl::na,struct_boost::mpl::na,struct_boost::mpl::na,struct_boost::mpl::na,struct_boost::mpl::na,struct_boost::mpl::na,struct_boost::mpl::na,struct_boost::mpl::na,struct_boost::mpl::na,struct_boost::mpl::na,struct_boost::mpl::na,struct_boost::mpl::na,struct_boost::mpl::na,struct_boost::mpl::na,struct_boost::mpl::na,struct_boost::m...ss<class_std::basic_string<char,struct_std::char_traits<char>,class_std::allocator<char>_>_>_>_>_>_> {
  node [shape="box"];
  graph [splines=ortho];
}