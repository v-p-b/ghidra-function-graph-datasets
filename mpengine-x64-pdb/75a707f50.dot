digraph ~_List_node_emplace_op2<class_std::allocator<struct_std::_List_node<struct_std::pair<class_std::basic_string<char,struct_std::char_traits<char>,class_std::allocator<char>_>_const_,class_std::unordered_map<class_std::basic_string<char,struct_std::char_traits<char>,class_std::allocator<char>_>,struct_rolling_queue,struct_std::hash<class_std::basic_string<char,struct_std::char_traits<char>,class_std::allocator<char>_>_>,struct_std::equal_to<class_std::basic_string<char,struct_std::char_traits<char>,class_std::allocator<char>_>_>,class_std::allocator<struct_std::pair<class_std::basic_string<char,struct_std::char_traits<char>,class_std::allocator<char>_>_const_,struct_rolling_queue>_>_>_>,void*___ptr64>_>_> {
  node [shape="box"];
  graph [splines=ortho];
  BB75a707f50 -> BB75a707f6b [color="green"];
  BB75a707f50 -> BB75a707f62 [color="red"];
  BB75a707f62 -> BB75a707f6b [color="red"];
}